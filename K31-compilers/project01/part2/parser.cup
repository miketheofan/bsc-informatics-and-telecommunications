/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal String     PLUS , LPAREN, RPAREN , RCURL ,  IF , ELSE , COMMA , PREFIX , SUFFIX;
terminal String     STRING_LITERAL , IDENTIF, TRICK;

/*  Non terminals */
non terminal            program;
non terminal String     concat , logicalExpr , stringTypes , ifStmt, body , function, main , mainUsg , expr_list , PARENargs , PARENargs2 , funcArgs , funcArgs2 , prefix , suffix;    // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
precedence left IF , ELSE;
precedence right PLUS ,COMMA;

/**
 *  The Grammar Rules
 */

/* Start of program. */

program ::= expr_list:e {: System.out.println(e+"\n}"); :}
    ;

/* Main functionality. Input categories might be either top level calls, or lower level declarations. following rule represents exactly that. */

expr_list ::= function:f expr_list:e {: RESULT = e+f; :}
            | main:m {: System.out.println("public class Main {\n\tpublic static void main(String[] args) {\t\t"+m+"\n\t}"); RESULT = " "; :}          
    ;

main ::= mainUsg:u main:m {: RESULT = u+m; :}
            | {: RESULT = " "; :}
    ;

mainUsg ::= body:b {: RESULT = "\n\t\tSystem.out.println("+b+");"; :}
    ;

function ::= IDENTIF:i LPAREN TRICK body:b RCURL{: RESULT = "\n\tpublic static String " + i + "(){\n\t\treturn " + b + ";\n\t}\n"; :}
            | IDENTIF:i LPAREN funcArgs:a body:b RCURL{: RESULT = "\n\tpublic static String " + i + "(" + a + "){\n\t\treturn " + b + ";\n\t}\n"; :}
    ;

PARENargs ::= body:i PARENargs2:r {: RESULT = i + r; :}         
    ;

PARENargs2 ::= COMMA body:i PARENargs2:r {: RESULT = "," + i + r; :}
            | {: RESULT = " "; :}
    ;

/* Function declaration arguments can only be type string (in our implementation, identifier). */

funcArgs ::= IDENTIF:i funcArgs2:f TRICK {: RESULT = "String " + i + f; :}
    ;

funcArgs2 ::= COMMA IDENTIF:i funcArgs2:f {: RESULT = ",String " + i + f; :}
            | {: RESULT = " "; :}
    ;

body ::= stringTypes:s {: RESULT = s; :} 
            | ifStmt:i {: RESULT = i; :}
            | concat:c {: RESULT = c; :}
    ;

concat ::= body:b1 PLUS body:b2 {: RESULT = b1 + "+" + b2; :}
    ;

ifStmt ::= IF LPAREN logicalExpr:l RPAREN body:b1 ELSE body:b2 {: RESULT = "(" + l + " ? " + b1 + " : " + b2 + ")"; :}
    ;

logicalExpr ::= prefix:p {: RESULT = p; :}
            | suffix:s {: RESULT = s; :}
    ;

stringTypes ::= STRING_LITERAL:s {: RESULT = "\""+s+"\""; :}
            | IDENTIF:i {: RESULT = i; :}
            | IDENTIF:i LPAREN RPAREN      {: RESULT = i + "()"; :}
            | IDENTIF:i LPAREN PARENargs:p RPAREN {: RESULT = i + "(" + p + ")"; :}
   ;

prefix ::= body:b1 PREFIX body:b2 {: RESULT = "(" + b2 + ").startsWith(" + b1 + ")"; :} 
    ;

suffix ::= body:b1 SUFFIX body:b2 {: RESULT = "(" + b2 + ").endsWith(" + b1 + ")"; :}
    ;